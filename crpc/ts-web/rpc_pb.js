/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.crpc.AccountAddressRequest', null, global);
goog.exportSymbol('proto.crpc.Address', null, global);
goog.exportSymbol('proto.crpc.Asset', null, global);
goog.exportSymbol('proto.crpc.Balance', null, global);
goog.exportSymbol('proto.crpc.BlockchainPendingPayment', null, global);
goog.exportSymbol('proto.crpc.CheckReachableRequest', null, global);
goog.exportSymbol('proto.crpc.CheckReachableResponse', null, global);
goog.exportSymbol('proto.crpc.CreateAddressRequest', null, global);
goog.exportSymbol('proto.crpc.CreateInvoiceRequest', null, global);
goog.exportSymbol('proto.crpc.EmtpyResponse', null, global);
goog.exportSymbol('proto.crpc.EstimateRequest', null, global);
goog.exportSymbol('proto.crpc.EstimationResponse', null, global);
goog.exportSymbol('proto.crpc.GenerateTransactionRequest', null, global);
goog.exportSymbol('proto.crpc.GenerateTransactionResponse', null, global);
goog.exportSymbol('proto.crpc.Invoice', null, global);
goog.exportSymbol('proto.crpc.LightningInfo', null, global);
goog.exportSymbol('proto.crpc.Market', null, global);
goog.exportSymbol('proto.crpc.NetworkInfoRequest', null, global);
goog.exportSymbol('proto.crpc.NetworkInfoResponse', null, global);
goog.exportSymbol('proto.crpc.Payment', null, global);
goog.exportSymbol('proto.crpc.PendingBalanceRequest', null, global);
goog.exportSymbol('proto.crpc.PendingTransactionsRequest', null, global);
goog.exportSymbol('proto.crpc.PendingTransactionsResponse', null, global);
goog.exportSymbol('proto.crpc.SendPaymentRequest', null, global);
goog.exportSymbol('proto.crpc.SendTransactionRequest', null, global);
goog.exportSymbol('proto.crpc.SubcribeOnPaymentsRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.EstimateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.EstimateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.EstimateRequest.displayName = 'proto.crpc.EstimateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.EstimateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.EstimateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.EstimateRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.EstimateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    asset: msg.getAsset(),
    amount: msg.getAmount()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.EstimateRequest}
 */
proto.crpc.EstimateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.EstimateRequest;
  return proto.crpc.EstimateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.EstimateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.EstimateRequest}
 */
proto.crpc.EstimateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.EstimateRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.EstimateRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.EstimateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.EstimateRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.EstimateRequest} The clone.
 */
proto.crpc.EstimateRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.EstimateRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string Asset = 1;
 * @return {string}
 */
proto.crpc.EstimateRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.EstimateRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Amount = 2;
 * @return {string}
 */
proto.crpc.EstimateRequest.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.EstimateRequest.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.EstimationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.EstimationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.EstimationResponse.displayName = 'proto.crpc.EstimationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.EstimationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.EstimationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.EstimationResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.EstimationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    usd: msg.getUsd()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.EstimationResponse}
 */
proto.crpc.EstimationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.EstimationResponse;
  return proto.crpc.EstimationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.EstimationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.EstimationResponse}
 */
proto.crpc.EstimationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.EstimationResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.EstimationResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.EstimationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.EstimationResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsd();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.EstimationResponse} The clone.
 */
proto.crpc.EstimationResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.EstimationResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string usd = 1;
 * @return {string}
 */
proto.crpc.EstimationResponse.prototype.getUsd = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.EstimationResponse.prototype.setUsd = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.CreateAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.CreateAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.CreateAddressRequest.displayName = 'proto.crpc.CreateAddressRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.CreateAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.CreateAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.CreateAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.CreateAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount(),
    asset: msg.getAsset()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.CreateAddressRequest}
 */
proto.crpc.CreateAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.CreateAddressRequest;
  return proto.crpc.CreateAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.CreateAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.CreateAddressRequest}
 */
proto.crpc.CreateAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.CreateAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.CreateAddressRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.CreateAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.CreateAddressRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.CreateAddressRequest} The clone.
 */
proto.crpc.CreateAddressRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.CreateAddressRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string account = 1;
 * @return {string}
 */
proto.crpc.CreateAddressRequest.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.CreateAddressRequest.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string asset = 2;
 * @return {string}
 */
proto.crpc.CreateAddressRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.CreateAddressRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.AccountAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.AccountAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.AccountAddressRequest.displayName = 'proto.crpc.AccountAddressRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.AccountAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.AccountAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.AccountAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.AccountAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount(),
    asset: msg.getAsset()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.AccountAddressRequest}
 */
proto.crpc.AccountAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.AccountAddressRequest;
  return proto.crpc.AccountAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.AccountAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.AccountAddressRequest}
 */
proto.crpc.AccountAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.AccountAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.AccountAddressRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.AccountAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.AccountAddressRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.AccountAddressRequest} The clone.
 */
proto.crpc.AccountAddressRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.AccountAddressRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string account = 1;
 * @return {string}
 */
proto.crpc.AccountAddressRequest.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.AccountAddressRequest.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string asset = 2;
 * @return {string}
 */
proto.crpc.AccountAddressRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.AccountAddressRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.PendingBalanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.PendingBalanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.PendingBalanceRequest.displayName = 'proto.crpc.PendingBalanceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.PendingBalanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.PendingBalanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.PendingBalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.PendingBalanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount(),
    asset: msg.getAsset()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.PendingBalanceRequest}
 */
proto.crpc.PendingBalanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.PendingBalanceRequest;
  return proto.crpc.PendingBalanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.PendingBalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.PendingBalanceRequest}
 */
proto.crpc.PendingBalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.PendingBalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.PendingBalanceRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.PendingBalanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.PendingBalanceRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.PendingBalanceRequest} The clone.
 */
proto.crpc.PendingBalanceRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.PendingBalanceRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string account = 1;
 * @return {string}
 */
proto.crpc.PendingBalanceRequest.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.PendingBalanceRequest.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string asset = 2;
 * @return {string}
 */
proto.crpc.PendingBalanceRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.PendingBalanceRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.PendingTransactionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.PendingTransactionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.PendingTransactionsRequest.displayName = 'proto.crpc.PendingTransactionsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.PendingTransactionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.PendingTransactionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.PendingTransactionsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.PendingTransactionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount(),
    asset: msg.getAsset()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.PendingTransactionsRequest}
 */
proto.crpc.PendingTransactionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.PendingTransactionsRequest;
  return proto.crpc.PendingTransactionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.PendingTransactionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.PendingTransactionsRequest}
 */
proto.crpc.PendingTransactionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.PendingTransactionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.PendingTransactionsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.PendingTransactionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.PendingTransactionsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.PendingTransactionsRequest} The clone.
 */
proto.crpc.PendingTransactionsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.PendingTransactionsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string account = 1;
 * @return {string}
 */
proto.crpc.PendingTransactionsRequest.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.PendingTransactionsRequest.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string asset = 2;
 * @return {string}
 */
proto.crpc.PendingTransactionsRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.PendingTransactionsRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.GenerateTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.GenerateTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.GenerateTransactionResponse.displayName = 'proto.crpc.GenerateTransactionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.GenerateTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.GenerateTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.GenerateTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.GenerateTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawTx: msg.getRawTx_asB64(),
    txId: msg.getTxId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.GenerateTransactionResponse}
 */
proto.crpc.GenerateTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.GenerateTransactionResponse;
  return proto.crpc.GenerateTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.GenerateTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.GenerateTransactionResponse}
 */
proto.crpc.GenerateTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawTx(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.GenerateTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.GenerateTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.GenerateTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.GenerateTransactionResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRawTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getTxId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.GenerateTransactionResponse} The clone.
 */
proto.crpc.GenerateTransactionResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.GenerateTransactionResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes raw_tx = 1;
 * @return {!(string|Uint8Array)}
 */
proto.crpc.GenerateTransactionResponse.prototype.getRawTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes raw_tx = 1;
 * This is a type-conversion wrapper around `getRawTx()`
 * @return {string}
 */
proto.crpc.GenerateTransactionResponse.prototype.getRawTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawTx()));
};


/**
 * optional bytes raw_tx = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawTx()`
 * @return {!Uint8Array}
 */
proto.crpc.GenerateTransactionResponse.prototype.getRawTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawTx()));
};


/** @param {!(string|Uint8Array)} value  */
proto.crpc.GenerateTransactionResponse.prototype.setRawTx = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string tx_id = 2;
 * @return {string}
 */
proto.crpc.GenerateTransactionResponse.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.GenerateTransactionResponse.prototype.setTxId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.SubcribeOnPaymentsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.SubcribeOnPaymentsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.SubcribeOnPaymentsRequest.displayName = 'proto.crpc.SubcribeOnPaymentsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.SubcribeOnPaymentsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.SubcribeOnPaymentsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.SubcribeOnPaymentsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.SubcribeOnPaymentsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    asset: msg.getAsset(),
    type: msg.getType()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.SubcribeOnPaymentsRequest}
 */
proto.crpc.SubcribeOnPaymentsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.SubcribeOnPaymentsRequest;
  return proto.crpc.SubcribeOnPaymentsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.SubcribeOnPaymentsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.SubcribeOnPaymentsRequest}
 */
proto.crpc.SubcribeOnPaymentsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.SubcribeOnPaymentsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.SubcribeOnPaymentsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.SubcribeOnPaymentsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.SubcribeOnPaymentsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.SubcribeOnPaymentsRequest} The clone.
 */
proto.crpc.SubcribeOnPaymentsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.SubcribeOnPaymentsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string asset = 1;
 * @return {string}
 */
proto.crpc.SubcribeOnPaymentsRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.SubcribeOnPaymentsRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.crpc.SubcribeOnPaymentsRequest.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.SubcribeOnPaymentsRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.BlockchainPendingPayment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.BlockchainPendingPayment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.BlockchainPendingPayment.displayName = 'proto.crpc.BlockchainPendingPayment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.BlockchainPendingPayment.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.BlockchainPendingPayment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.BlockchainPendingPayment} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.BlockchainPendingPayment.toObject = function(includeInstance, msg) {
  var f, obj = {
    payment: (f = msg.getPayment()) && proto.crpc.Payment.toObject(includeInstance, f),
    confirmations: msg.getConfirmations(),
    confirmationsLeft: msg.getConfirmationsLeft()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.BlockchainPendingPayment}
 */
proto.crpc.BlockchainPendingPayment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.BlockchainPendingPayment;
  return proto.crpc.BlockchainPendingPayment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.BlockchainPendingPayment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.BlockchainPendingPayment}
 */
proto.crpc.BlockchainPendingPayment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.crpc.Payment;
      reader.readMessage(value,proto.crpc.Payment.deserializeBinaryFromReader);
      msg.setPayment(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConfirmations(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConfirmationsLeft(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.BlockchainPendingPayment} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.BlockchainPendingPayment.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.BlockchainPendingPayment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.BlockchainPendingPayment.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPayment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.crpc.Payment.serializeBinaryToWriter
    );
  }
  f = this.getConfirmations();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getConfirmationsLeft();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.BlockchainPendingPayment} The clone.
 */
proto.crpc.BlockchainPendingPayment.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.BlockchainPendingPayment} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Payment payment = 1;
 * @return {proto.crpc.Payment}
 */
proto.crpc.BlockchainPendingPayment.prototype.getPayment = function() {
  return /** @type{proto.crpc.Payment} */ (
    jspb.Message.getWrapperField(this, proto.crpc.Payment, 1));
};


/** @param {proto.crpc.Payment|undefined} value  */
proto.crpc.BlockchainPendingPayment.prototype.setPayment = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.crpc.BlockchainPendingPayment.prototype.clearPayment = function() {
  this.setPayment(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.crpc.BlockchainPendingPayment.prototype.hasPayment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 confirmations = 2;
 * @return {number}
 */
proto.crpc.BlockchainPendingPayment.prototype.getConfirmations = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.crpc.BlockchainPendingPayment.prototype.setConfirmations = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 confirmations_left = 3;
 * @return {number}
 */
proto.crpc.BlockchainPendingPayment.prototype.getConfirmationsLeft = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.crpc.BlockchainPendingPayment.prototype.setConfirmationsLeft = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.Payment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.Payment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.Payment.displayName = 'proto.crpc.Payment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.Payment.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.Payment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.Payment} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.Payment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    amount: msg.getAmount(),
    account: msg.getAccount(),
    address: msg.getAddress(),
    type: msg.getType()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.Payment}
 */
proto.crpc.Payment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.Payment;
  return proto.crpc.Payment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.Payment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.Payment}
 */
proto.crpc.Payment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.Payment} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.Payment.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.Payment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.Payment.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAccount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.Payment} The clone.
 */
proto.crpc.Payment.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.Payment} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.crpc.Payment.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.Payment.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.crpc.Payment.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.Payment.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string account = 3;
 * @return {string}
 */
proto.crpc.Payment.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.crpc.Payment.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string address = 4;
 * @return {string}
 */
proto.crpc.Payment.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.crpc.Payment.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string type = 5;
 * @return {string}
 */
proto.crpc.Payment.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.crpc.Payment.prototype.setType = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.EmtpyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.EmtpyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.EmtpyResponse.displayName = 'proto.crpc.EmtpyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.EmtpyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.EmtpyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.EmtpyResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.EmtpyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.EmtpyResponse}
 */
proto.crpc.EmtpyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.EmtpyResponse;
  return proto.crpc.EmtpyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.EmtpyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.EmtpyResponse}
 */
proto.crpc.EmtpyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.EmtpyResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.EmtpyResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.EmtpyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.EmtpyResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.EmtpyResponse} The clone.
 */
proto.crpc.EmtpyResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.EmtpyResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.Balance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.Balance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.Balance.displayName = 'proto.crpc.Balance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.Balance.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.Balance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.Balance} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.Balance.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.Balance}
 */
proto.crpc.Balance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.Balance;
  return proto.crpc.Balance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.Balance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.Balance}
 */
proto.crpc.Balance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.Balance} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.Balance.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.Balance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.Balance.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.Balance} The clone.
 */
proto.crpc.Balance.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.Balance} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.crpc.Balance.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.Balance.prototype.setData = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.Address.displayName = 'proto.crpc.Address';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.Address} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.Address}
 */
proto.crpc.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.Address;
  return proto.crpc.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.Address}
 */
proto.crpc.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.Address} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.Address.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.Address.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.Address} The clone.
 */
proto.crpc.Address.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.Address} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.crpc.Address.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.Address.prototype.setData = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.Invoice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.Invoice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.Invoice.displayName = 'proto.crpc.Invoice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.Invoice.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.Invoice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.Invoice} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.Invoice.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.Invoice}
 */
proto.crpc.Invoice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.Invoice;
  return proto.crpc.Invoice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.Invoice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.Invoice}
 */
proto.crpc.Invoice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.Invoice} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.Invoice.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.Invoice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.Invoice.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.Invoice} The clone.
 */
proto.crpc.Invoice.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.Invoice} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.crpc.Invoice.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.Invoice.prototype.setData = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.CheckReachableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.CheckReachableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.CheckReachableRequest.displayName = 'proto.crpc.CheckReachableRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.CheckReachableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.CheckReachableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.CheckReachableRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.CheckReachableRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    asset: msg.getAsset(),
    identityKey: msg.getIdentityKey()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.CheckReachableRequest}
 */
proto.crpc.CheckReachableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.CheckReachableRequest;
  return proto.crpc.CheckReachableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.CheckReachableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.CheckReachableRequest}
 */
proto.crpc.CheckReachableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentityKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.CheckReachableRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.CheckReachableRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.CheckReachableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.CheckReachableRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getIdentityKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.CheckReachableRequest} The clone.
 */
proto.crpc.CheckReachableRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.CheckReachableRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string asset = 1;
 * @return {string}
 */
proto.crpc.CheckReachableRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.CheckReachableRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string identity_key = 2;
 * @return {string}
 */
proto.crpc.CheckReachableRequest.prototype.getIdentityKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.CheckReachableRequest.prototype.setIdentityKey = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.PendingTransactionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.crpc.PendingTransactionsResponse.repeatedFields_, null);
};
goog.inherits(proto.crpc.PendingTransactionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.PendingTransactionsResponse.displayName = 'proto.crpc.PendingTransactionsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.crpc.PendingTransactionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.PendingTransactionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.PendingTransactionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.PendingTransactionsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.PendingTransactionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentsList: jspb.Message.toObjectList(msg.getPaymentsList(),
    proto.crpc.BlockchainPendingPayment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.PendingTransactionsResponse}
 */
proto.crpc.PendingTransactionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.PendingTransactionsResponse;
  return proto.crpc.PendingTransactionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.PendingTransactionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.PendingTransactionsResponse}
 */
proto.crpc.PendingTransactionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.crpc.BlockchainPendingPayment;
      reader.readMessage(value,proto.crpc.BlockchainPendingPayment.deserializeBinaryFromReader);
      msg.getPaymentsList().push(value);
      msg.setPaymentsList(msg.getPaymentsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.PendingTransactionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.PendingTransactionsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.PendingTransactionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.PendingTransactionsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPaymentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.crpc.BlockchainPendingPayment.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.PendingTransactionsResponse} The clone.
 */
proto.crpc.PendingTransactionsResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.PendingTransactionsResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated BlockchainPendingPayment payments = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.crpc.BlockchainPendingPayment>}
 */
proto.crpc.PendingTransactionsResponse.prototype.getPaymentsList = function() {
  return /** @type{!Array.<!proto.crpc.BlockchainPendingPayment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.crpc.BlockchainPendingPayment, 1));
};


/** @param {Array.<!proto.crpc.BlockchainPendingPayment>} value  */
proto.crpc.PendingTransactionsResponse.prototype.setPaymentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.crpc.PendingTransactionsResponse.prototype.clearPaymentsList = function() {
  this.setPaymentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.GenerateTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.GenerateTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.GenerateTransactionRequest.displayName = 'proto.crpc.GenerateTransactionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.GenerateTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.GenerateTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.GenerateTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.GenerateTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    asset: msg.getAsset(),
    receiverAddress: msg.getReceiverAddress(),
    amount: msg.getAmount()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.GenerateTransactionRequest}
 */
proto.crpc.GenerateTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.GenerateTransactionRequest;
  return proto.crpc.GenerateTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.GenerateTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.GenerateTransactionRequest}
 */
proto.crpc.GenerateTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.GenerateTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.GenerateTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.GenerateTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.GenerateTransactionRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getReceiverAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.GenerateTransactionRequest} The clone.
 */
proto.crpc.GenerateTransactionRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.GenerateTransactionRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string asset = 1;
 * @return {string}
 */
proto.crpc.GenerateTransactionRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.GenerateTransactionRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string receiver_address = 2;
 * @return {string}
 */
proto.crpc.GenerateTransactionRequest.prototype.getReceiverAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.GenerateTransactionRequest.prototype.setReceiverAddress = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.crpc.GenerateTransactionRequest.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.crpc.GenerateTransactionRequest.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.SendTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.SendTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.SendTransactionRequest.displayName = 'proto.crpc.SendTransactionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.SendTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.SendTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.SendTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.SendTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    asset: msg.getAsset(),
    rawTx: msg.getRawTx_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.SendTransactionRequest}
 */
proto.crpc.SendTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.SendTransactionRequest;
  return proto.crpc.SendTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.SendTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.SendTransactionRequest}
 */
proto.crpc.SendTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.SendTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.SendTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.SendTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.SendTransactionRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getRawTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.SendTransactionRequest} The clone.
 */
proto.crpc.SendTransactionRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.SendTransactionRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string asset = 1;
 * @return {string}
 */
proto.crpc.SendTransactionRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.SendTransactionRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes raw_tx = 2;
 * @return {!(string|Uint8Array)}
 */
proto.crpc.SendTransactionRequest.prototype.getRawTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes raw_tx = 2;
 * This is a type-conversion wrapper around `getRawTx()`
 * @return {string}
 */
proto.crpc.SendTransactionRequest.prototype.getRawTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawTx()));
};


/**
 * optional bytes raw_tx = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawTx()`
 * @return {!Uint8Array}
 */
proto.crpc.SendTransactionRequest.prototype.getRawTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawTx()));
};


/** @param {!(string|Uint8Array)} value  */
proto.crpc.SendTransactionRequest.prototype.setRawTx = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.NetworkInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.NetworkInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.NetworkInfoRequest.displayName = 'proto.crpc.NetworkInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.NetworkInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.NetworkInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.NetworkInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.NetworkInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    asset: msg.getAsset(),
    type: msg.getType()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.NetworkInfoRequest}
 */
proto.crpc.NetworkInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.NetworkInfoRequest;
  return proto.crpc.NetworkInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.NetworkInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.NetworkInfoRequest}
 */
proto.crpc.NetworkInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.NetworkInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.NetworkInfoRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.NetworkInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.NetworkInfoRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.NetworkInfoRequest} The clone.
 */
proto.crpc.NetworkInfoRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.NetworkInfoRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string asset = 1;
 * @return {string}
 */
proto.crpc.NetworkInfoRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.NetworkInfoRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.crpc.NetworkInfoRequest.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.NetworkInfoRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.LightningInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.crpc.LightningInfo.repeatedFields_, null);
};
goog.inherits(proto.crpc.LightningInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.LightningInfo.displayName = 'proto.crpc.LightningInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.crpc.LightningInfo.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.LightningInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.LightningInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.LightningInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.LightningInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: msg.getHost(),
    port: msg.getPort(),
    minAmount: msg.getMinAmount(),
    maxAmount: msg.getMaxAmount(),
    identityPubkey: msg.getIdentityPubkey(),
    alias: msg.getAlias(),
    numPendingChannels: msg.getNumPendingChannels(),
    numActiveChannels: msg.getNumActiveChannels(),
    numPeers: msg.getNumPeers(),
    blockHeight: msg.getBlockHeight(),
    blockHash: msg.getBlockHash(),
    syncedToChain: msg.getSyncedToChain(),
    testnet: msg.getTestnet(),
    chainsList: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.LightningInfo}
 */
proto.crpc.LightningInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.LightningInfo;
  return proto.crpc.LightningInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.LightningInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.LightningInfo}
 */
proto.crpc.LightningInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentityPubkey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumPendingChannels(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumActiveChannels(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumPeers(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockHeight(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSyncedToChain(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.getChainsList().push(value);
      msg.setChainsList(msg.getChainsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.LightningInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.LightningInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.LightningInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.LightningInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPort();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getMinAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getMaxAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getAlias();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getNumPendingChannels();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getNumActiveChannels();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = this.getNumPeers();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = this.getBlockHeight();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = this.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getSyncedToChain();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = this.getTestnet();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = this.getChainsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.LightningInfo} The clone.
 */
proto.crpc.LightningInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.LightningInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.crpc.LightningInfo.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.LightningInfo.prototype.setHost = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string port = 2;
 * @return {string}
 */
proto.crpc.LightningInfo.prototype.getPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.LightningInfo.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string min_amount = 3;
 * @return {string}
 */
proto.crpc.LightningInfo.prototype.getMinAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.crpc.LightningInfo.prototype.setMinAmount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string max_amount = 4;
 * @return {string}
 */
proto.crpc.LightningInfo.prototype.getMaxAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.crpc.LightningInfo.prototype.setMaxAmount = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string identity_pubkey = 5;
 * @return {string}
 */
proto.crpc.LightningInfo.prototype.getIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.crpc.LightningInfo.prototype.setIdentityPubkey = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string alias = 6;
 * @return {string}
 */
proto.crpc.LightningInfo.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.crpc.LightningInfo.prototype.setAlias = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 num_pending_channels = 7;
 * @return {number}
 */
proto.crpc.LightningInfo.prototype.getNumPendingChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.crpc.LightningInfo.prototype.setNumPendingChannels = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 num_active_channels = 8;
 * @return {number}
 */
proto.crpc.LightningInfo.prototype.getNumActiveChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.crpc.LightningInfo.prototype.setNumActiveChannels = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 num_peers = 9;
 * @return {number}
 */
proto.crpc.LightningInfo.prototype.getNumPeers = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.crpc.LightningInfo.prototype.setNumPeers = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint32 block_height = 10;
 * @return {number}
 */
proto.crpc.LightningInfo.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.crpc.LightningInfo.prototype.setBlockHeight = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string block_hash = 11;
 * @return {string}
 */
proto.crpc.LightningInfo.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.crpc.LightningInfo.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bool synced_to_chain = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.crpc.LightningInfo.prototype.getSyncedToChain = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 12, false));
};


/** @param {boolean} value  */
proto.crpc.LightningInfo.prototype.setSyncedToChain = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bool testnet = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.crpc.LightningInfo.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 13, false));
};


/** @param {boolean} value  */
proto.crpc.LightningInfo.prototype.setTestnet = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * repeated string chains = 14;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.crpc.LightningInfo.prototype.getChainsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 14));
};


/** @param {Array.<string>} value  */
proto.crpc.LightningInfo.prototype.setChainsList = function(value) {
  jspb.Message.setField(this, 14, value || []);
};


proto.crpc.LightningInfo.prototype.clearChainsList = function() {
  jspb.Message.setField(this, 14, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.NetworkInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.crpc.NetworkInfoResponse.oneofGroups_);
};
goog.inherits(proto.crpc.NetworkInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.NetworkInfoResponse.displayName = 'proto.crpc.NetworkInfoResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.crpc.NetworkInfoResponse.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.crpc.NetworkInfoResponse.DataCase = {
  DATA_NOT_SET: 0,
  LIGHTING_INFO: 1
};

/**
 * @return {proto.crpc.NetworkInfoResponse.DataCase}
 */
proto.crpc.NetworkInfoResponse.prototype.getDataCase = function() {
  return /** @type {proto.crpc.NetworkInfoResponse.DataCase} */(jspb.Message.computeOneofCase(this, proto.crpc.NetworkInfoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.NetworkInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.NetworkInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.NetworkInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.NetworkInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    lightingInfo: (f = msg.getLightingInfo()) && proto.crpc.LightningInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.NetworkInfoResponse}
 */
proto.crpc.NetworkInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.NetworkInfoResponse;
  return proto.crpc.NetworkInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.NetworkInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.NetworkInfoResponse}
 */
proto.crpc.NetworkInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.crpc.LightningInfo;
      reader.readMessage(value,proto.crpc.LightningInfo.deserializeBinaryFromReader);
      msg.setLightingInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.NetworkInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.NetworkInfoResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.NetworkInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.NetworkInfoResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLightingInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.crpc.LightningInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.NetworkInfoResponse} The clone.
 */
proto.crpc.NetworkInfoResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.NetworkInfoResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional LightningInfo lighting_info = 1;
 * @return {proto.crpc.LightningInfo}
 */
proto.crpc.NetworkInfoResponse.prototype.getLightingInfo = function() {
  return /** @type{proto.crpc.LightningInfo} */ (
    jspb.Message.getWrapperField(this, proto.crpc.LightningInfo, 1));
};


/** @param {proto.crpc.LightningInfo|undefined} value  */
proto.crpc.NetworkInfoResponse.prototype.setLightingInfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.crpc.NetworkInfoResponse.oneofGroups_[0], value);
};


proto.crpc.NetworkInfoResponse.prototype.clearLightingInfo = function() {
  this.setLightingInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.crpc.NetworkInfoResponse.prototype.hasLightingInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.CreateInvoiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.CreateInvoiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.CreateInvoiceRequest.displayName = 'proto.crpc.CreateInvoiceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.CreateInvoiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.CreateInvoiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.CreateInvoiceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.CreateInvoiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    asset: msg.getAsset(),
    account: msg.getAccount(),
    amount: msg.getAmount()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.CreateInvoiceRequest}
 */
proto.crpc.CreateInvoiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.CreateInvoiceRequest;
  return proto.crpc.CreateInvoiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.CreateInvoiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.CreateInvoiceRequest}
 */
proto.crpc.CreateInvoiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.CreateInvoiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.CreateInvoiceRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.CreateInvoiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.CreateInvoiceRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAccount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.CreateInvoiceRequest} The clone.
 */
proto.crpc.CreateInvoiceRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.CreateInvoiceRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string asset = 1;
 * @return {string}
 */
proto.crpc.CreateInvoiceRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.CreateInvoiceRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string account = 2;
 * @return {string}
 */
proto.crpc.CreateInvoiceRequest.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.CreateInvoiceRequest.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.crpc.CreateInvoiceRequest.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.crpc.CreateInvoiceRequest.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.SendPaymentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.SendPaymentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.SendPaymentRequest.displayName = 'proto.crpc.SendPaymentRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.SendPaymentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.SendPaymentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.SendPaymentRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.SendPaymentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    asset: msg.getAsset(),
    invoice: msg.getInvoice()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.SendPaymentRequest}
 */
proto.crpc.SendPaymentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.SendPaymentRequest;
  return proto.crpc.SendPaymentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.SendPaymentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.SendPaymentRequest}
 */
proto.crpc.SendPaymentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.SendPaymentRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.SendPaymentRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.SendPaymentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.SendPaymentRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAsset();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getInvoice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.SendPaymentRequest} The clone.
 */
proto.crpc.SendPaymentRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.SendPaymentRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string asset = 1;
 * @return {string}
 */
proto.crpc.SendPaymentRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crpc.SendPaymentRequest.prototype.setAsset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string invoice = 2;
 * @return {string}
 */
proto.crpc.SendPaymentRequest.prototype.getInvoice = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crpc.SendPaymentRequest.prototype.setInvoice = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crpc.CheckReachableResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crpc.CheckReachableResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crpc.CheckReachableResponse.displayName = 'proto.crpc.CheckReachableResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crpc.CheckReachableResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.crpc.CheckReachableResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crpc.CheckReachableResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crpc.CheckReachableResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isreachable: msg.getIsreachable()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crpc.CheckReachableResponse}
 */
proto.crpc.CheckReachableResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crpc.CheckReachableResponse;
  return proto.crpc.CheckReachableResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crpc.CheckReachableResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crpc.CheckReachableResponse}
 */
proto.crpc.CheckReachableResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsreachable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.crpc.CheckReachableResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.CheckReachableResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crpc.CheckReachableResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.crpc.CheckReachableResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIsreachable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crpc.CheckReachableResponse} The clone.
 */
proto.crpc.CheckReachableResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.crpc.CheckReachableResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool isReachable = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.crpc.CheckReachableResponse.prototype.getIsreachable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.crpc.CheckReachableResponse.prototype.setIsreachable = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.crpc.Asset = {
  BTC: 0,
  BCH: 1,
  ETH: 2,
  LTC: 3,
  DASH: 4
};

/**
 * @enum {number}
 */
proto.crpc.Market = {
  BTCETH: 0,
  BTCBTH: 1,
  BTCLTC: 2,
  BTCDASH: 3,
  ETHLTC: 4
};

goog.object.extend(exports, proto.crpc);
